// Mocks generated by Mockito 5.2.0 from annotations
// in softwaretutorials/test/presentation/bloctest/project_submission_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:softwaretutorials/infrastructure/local_repository/tutorial_local_repository.dart'
    as _i2;
import 'package:softwaretutorials/infrastructure/tutorials/project_service.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeTutorialLocalRepository_0 extends _i1.Fake
    implements _i2.TutorialLocalRepository {}

/// A class which mocks [ProjectRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProjectRepository extends _i1.Mock implements _i3.ProjectRepository {
  MockProjectRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TutorialLocalRepository get tutorialLocalRepository =>
      (super.noSuchMethod(Invocation.getter(#tutorialLocalRepository),
              returnValue: _FakeTutorialLocalRepository_0())
          as _i2.TutorialLocalRepository);
  @override
  _i4.Future<bool> createProject({int? tutorialId, String? projectUrl}) =>
      (super.noSuchMethod(
          Invocation.method(#createProject, [],
              {#tutorialId: tutorialId, #projectUrl: projectUrl}),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> updateProject({int? tutorialId, String? projectUrl}) =>
      (super.noSuchMethod(
          Invocation.method(#updateProject, [],
              {#tutorialId: tutorialId, #projectUrl: projectUrl}),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> deleteProject({int? tutorialId}) => (super.noSuchMethod(
      Invocation.method(#deleteProject, [], {#tutorialId: tutorialId}),
      returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
}
